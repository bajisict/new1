---

---

<div class="modal fade" id="cartModal" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Таны сагс</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"
        ></button>
      </div>
      <div class="modal-body">
        <div id="cartItems" class="mb-3">
          <!-- Cart items will be dynamically inserted here -->
        </div>
        <div
          class="d-flex justify-content-between align-items-center border-top pt-3"
        >
          <h5 class="mb-0">Нийт дүн:</h5>
          <h5 class="mb-0" id="cartTotal">0₮</h5>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal"
          >Хаах</button
        >
        <button type="button" class="btn btn-danger" id="clearCartBtn"
          >Сагс хоослох</button
        >
        <button type="button" class="btn btn-primary" id="checkoutBtn"
          >Захиалах</button
        >
      </div>
    </div>
  </div>
</div>

<script>
  class CartManager {
    [x: string]: any;
    constructor() {
      this.cart = JSON.parse(localStorage.getItem("cart") || "[]");
      this.bindEvents();
      this.updateCartCount();
    }

    bindEvents() {
      document
        .getElementById("clearCartBtn")
        ?.addEventListener("click", () => this.clearCart());
      document
        .getElementById("checkoutBtn")
        ?.addEventListener("click", () => this.checkout());
    }

    updateCartCount() {
      const cartCount = document.getElementById("cartCount");
      if (cartCount) {
        const totalItems = this.cart.reduce(
          (sum: any, item: { quantity: any }) => sum + item.quantity,
          0
        );
        cartCount.textContent = totalItems.toString();
      }
    }

    updateCartDisplay() {
      const cartItems = document.getElementById("cartItems");
      const cartTotal = document.getElementById("cartTotal");

      if (!cartItems || !cartTotal) return;

      if (this.cart.length === 0) {
        cartItems.innerHTML =
          '<p class="text-center text-muted">Таны сагс хоосон байна</p>';
        cartTotal.textContent = "0₮";
        return;
      }

      let total = 0;
      cartItems.innerHTML = this.cart
        .map(
          (
            item: { price: number; quantity: number; image: any; name: any },
            index: any
          ) => {
            total += item.price * item.quantity;
            return `
          <div class="d-flex align-items-center gap-3 mb-3">
            <img src="${item.image}" alt="${item.name}" class="rounded" style="width: 64px; height: 64px; object-fit: cover;">
            <div class="flex-grow-1">
              <h6 class="mb-0">${item.name}</h6>
              <div class="text-muted small">${item.price.toLocaleString()}₮ × ${item.quantity}</div>
            </div>
            <button 
              class="btn btn-sm btn-outline-danger" 
              onclick="cartManager.decreaseFromCart(${index})"
            >
              <i class="bi bi-caret-down"></i>
            </button>
            <button 
              class="btn btn-sm btn-outline-danger" 
              onclick="cartManager.removeFromCart(${index})"
            >
              <i class="bi bi-trash"></i>
            </button>
          </div>
        `;
          }
        )
        .join("");

      cartTotal.textContent = total.toLocaleString() + "₮";
    }

    addToCart(product: { id: any }) {
      const existingItem = this.cart.find(
        (item: { id: any }) => item.id === product.id
      );

      if (existingItem) {
        existingItem.quantity += 1;
      } else {
        this.cart.push({
          ...product,
          quantity: 1,
        });
      }

      this.saveCart();
      this.updateCartCount();
      this.updateCartDisplay();
    }
    decreaseFromCart(index: number) {
      const existingItem = this.cart[index];

      if (existingItem) {
        if (existingItem.quantity > 1) {
          existingItem.quantity -= 1;
        } else {
          this.removeFromCart(index);
        }
      }

      this.saveCart();
      this.updateCartCount();
      this.updateCartDisplay();
    }

    removeFromCart(index: any) {
      this.cart.splice(index, 1);
      this.saveCart();
      this.updateCartCount();
      this.updateCartDisplay();
    }

    clearCart() {
      this.cart = [];
      this.saveCart();
      this.updateCartCount();
      this.updateCartDisplay();
    }

    saveCart() {
      localStorage.setItem("cart", JSON.stringify(this.cart));
    }

    checkout() {
      if (this.cart.length === 0) {
        alert("Таны сагс хоосон байна!");
        return;
      }
      // Add checkout logic here
      alert("Захиалга амжилттай!");
      this.clearCart();
    }
  }

  // Initialize cart manage
  const cartManager = new CartManager();
  window.cartManager = cartManager;

  // Update cart display when modal is shown
  const cartModal = document.getElementById("cartModal");
  cartModal?.addEventListener("show.bs.modal", () => {
    cartManager.updateCartDisplay();
  });
</script>
