---
// src/components/ProductListPagination.astro
import ProductCard from "./ProductCard.astro";

const { 
  products, 
  pageSize = 16, 
  gridCols = "repeat(auto-fill, minmax(280px, 1fr))"
} = Astro.props;

const totalPages = Math.ceil(products.length / pageSize);
---

<div class="pagination-container" data-page-size={pageSize} data-total-pages={totalPages}>
  <div class="product-list">
    {products.map((product, index) => (
      <div class="product-item" data-page={Math.floor(index / pageSize) + 1}>
        <ProductCard {...product} />
      </div>
    ))}
  </div>

  {totalPages > 1 && (
    <nav class="pagination">
      <button class="pagination-btn" data-page="prev" disabled>
        Өмнөх
      </button>
      {Array.from({ length: totalPages }).map((_, index) => {
        const page = index + 1;
        return (
          <button
            class={`pagination-btn ${page === 1 ? 'active' : ''}`}
            data-page={page}
          >
            {page}
          </button>
        );
      })}
      <button class="pagination-btn" data-page="next">
        Дараах
      </button>
    </nav>
  )}
</div>

<style define:vars={{ gridCols }}>
  .product-list {
    display: grid;
    grid-template-columns: var(--gridCols);
    gap: 2rem;
    padding: 2rem 0;
  }

  .product-item {
    display: none;
  }

  .product-item.active {
    display: block;
  }

  .pagination {
    display: flex;
    justify-content: center;
    gap: 0.5rem;
    margin: 2rem 0;
  }

  .pagination-btn {
    padding: 8px 12px;
    border: 1px solid #ccc;
    border-radius: 6px;
    background: white;
    color: #333;
    cursor: pointer;
    transition: all 0.2s;
  }

  .pagination-btn:hover:not(:disabled) {
    background: #eee;
  }

  .pagination-btn.active {
    background: #2563eb;
    color: white;
    border-color: #2563eb;
  }

  .pagination-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const container = document.querySelector('.pagination-container');
    if (!container) return;

    const pageSize = parseInt(container.dataset.pageSize);
    const totalPages = parseInt(container.dataset.totalPages);
    const productItems = container.querySelectorAll('.product-item');
    const paginationBtns = container.querySelectorAll('.pagination-btn');
    
    let currentPage = 1;

    function showPage(page) {
      // Hide all products
      productItems.forEach(item => {
        item.classList.remove('active');
      });

      // Show products for current page
      const start = (page - 1) * pageSize;
      const end = start + pageSize;
      
      for (let i = start; i < end && i < productItems.length; i++) {
        productItems[i].classList.add('active');
      }

      // Update pagination buttons
      paginationBtns.forEach(btn => {
        btn.classList.remove('active');
        const btnPage = btn.dataset.page;
        
        if (btnPage === page.toString()) {
          btn.classList.add('active');
        }
        
        // Handle prev/next buttons
        if (btnPage === 'prev') {
          btn.disabled = page === 1;
        } else if (btnPage === 'next') {
          btn.disabled = page === totalPages;
        }
      });

      currentPage = page;
    }

    // Handle pagination clicks
    paginationBtns.forEach(btn => {
      btn.addEventListener('click', function(e) {
        e.preventDefault();
        const page = this.dataset.page;
        
        if (page === 'prev' && currentPage > 1) {
          showPage(currentPage - 1);
        } else if (page === 'next' && currentPage < totalPages) {
          showPage(currentPage + 1);
        } else if (!isNaN(page)) {
          showPage(parseInt(page));
        }
      });
    });

    // Show first page initially
    showPage(1);
  });
</script>